/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Wheel {
  export type AccountStruct = {
    owner: AddressLike;
    nick: string;
    value: BigNumberish;
  };

  export type AccountStructOutput = [
    owner: string,
    nick: string,
    value: bigint
  ] & { owner: string; nick: string; value: bigint };

  export type BetStruct = {
    account: AddressLike;
    spinId: BigNumberish;
    amount: BigNumberish;
    betType: BigNumberish;
    number: BigNumberish;
    row: BigNumberish;
    column: BigNumberish;
    color: BigNumberish;
    parity: BigNumberish;
    numbers: BigNumberish[];
    byTheDozen: BigNumberish;
    byThe18: BigNumberish;
  };

  export type BetStructOutput = [
    account: string,
    spinId: bigint,
    amount: bigint,
    betType: bigint,
    number: bigint,
    row: bigint,
    column: bigint,
    color: bigint,
    parity: bigint,
    numbers: bigint[],
    byTheDozen: bigint,
    byThe18: bigint
  ] & {
    account: string;
    spinId: bigint;
    amount: bigint;
    betType: bigint;
    number: bigint;
    row: bigint;
    column: bigint;
    color: bigint;
    parity: bigint;
    numbers: bigint[];
    byTheDozen: bigint;
    byThe18: bigint;
  };

  export type SpinStruct = {
    spinId: BigNumberish;
    startTime: BigNumberish;
    hasSpun: boolean;
    spunNumberId: BigNumberish;
    spunTime: BigNumberish;
  };

  export type SpinStructOutput = [
    spinId: bigint,
    startTime: bigint,
    hasSpun: boolean,
    spunNumberId: bigint,
    spunTime: bigint
  ] & {
    spinId: bigint;
    startTime: bigint;
    hasSpun: boolean;
    spunNumberId: bigint;
    spunTime: bigint;
  };

  export type NumberStruct = {
    id: BigNumberish;
    name: string;
    parity: BigNumberish;
    color: BigNumberish;
    row: BigNumberish;
    column: BigNumberish;
    which18: BigNumberish;
    whichDozen: BigNumberish;
  };

  export type NumberStructOutput = [
    id: bigint,
    name: string,
    parity: bigint,
    color: bigint,
    row: bigint,
    column: bigint,
    which18: bigint,
    whichDozen: bigint
  ] & {
    id: bigint;
    name: string;
    parity: bigint;
    color: bigint;
    row: bigint;
    column: bigint;
    which18: bigint;
    whichDozen: bigint;
  };
}

export interface WheelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateExposure"
      | "closeAccount"
      | "currentBalance"
      | "fund"
      | "fundAccount"
      | "getAccount"
      | "getAccounts"
      | "getBetsForSpin"
      | "getCurrentBets"
      | "getCurrentSpin"
      | "getLastSpins"
      | "getNumbers"
      | "isOpenForWithdrawl"
      | "minbetinside"
      | "minbetoutside"
      | "mindeposit"
      | "openAccount"
      | "openBets"
      | "owner"
      | "place18Bet"
      | "placeColorBet"
      | "placeColumnBet"
      | "placeCornerBet"
      | "placeDoubleStreetBet"
      | "placeDozenBet"
      | "placeParityBet"
      | "placeSplitBet"
      | "placeStraightUpBet"
      | "placeStreetBet"
      | "placeTopLineBet"
      | "rawFulfillRandomWords"
      | "renounceOwnership"
      | "spinTheWheel"
      | "timeBetweenBets"
      | "timeForBet"
      | "transferOwnership"
      | "widthdrawFund"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountAdded"
      | "BetPlaced"
      | "NewSpinOpened"
      | "OwnershipTransferred"
      | "SpinStarted"
      | "Spun"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateExposure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBetsForSpin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSpin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSpins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOpenForWithdrawl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minbetinside",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minbetoutside",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mindeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "openAccount", values: [string]): string;
  encodeFunctionData(functionFragment: "openBets", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "place18Bet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeColorBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeColumnBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeCornerBet",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "placeDoubleStreetBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeDozenBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeParityBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeSplitBet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeStraightUpBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeStreetBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeTopLineBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spinTheWheel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeBetweenBets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeForBet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "widthdrawFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateExposure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBetsForSpin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSpin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSpins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNumbers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOpenForWithdrawl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minbetinside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minbetoutside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mindeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "place18Bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeColorBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeColumnBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeCornerBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeDoubleStreetBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeDozenBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeParityBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeSplitBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeStraightUpBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeStreetBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeTopLineBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spinTheWheel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeBetweenBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeForBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "widthdrawFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AccountAddedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetPlacedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSpinOpenedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpinStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpunEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Wheel extends BaseContract {
  connect(runner?: ContractRunner | null): Wheel;
  waitForDeployment(): Promise<this>;

  interface: WheelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateExposure: TypedContractMethod<
    [spinId: BigNumberish],
    [bigint],
    "view"
  >;

  closeAccount: TypedContractMethod<[], [void], "payable">;

  currentBalance: TypedContractMethod<[], [bigint], "view">;

  fund: TypedContractMethod<[], [void], "payable">;

  fundAccount: TypedContractMethod<[], [void], "payable">;

  getAccount: TypedContractMethod<[], [Wheel.AccountStructOutput], "view">;

  getAccounts: TypedContractMethod<[], [Wheel.AccountStructOutput[]], "view">;

  getBetsForSpin: TypedContractMethod<
    [spinId: BigNumberish],
    [Wheel.BetStructOutput[]],
    "view"
  >;

  getCurrentBets: TypedContractMethod<[], [Wheel.BetStructOutput[]], "view">;

  getCurrentSpin: TypedContractMethod<[], [Wheel.SpinStructOutput], "view">;

  getLastSpins: TypedContractMethod<
    [count: BigNumberish],
    [Wheel.SpinStructOutput[]],
    "view"
  >;

  getNumbers: TypedContractMethod<[], [Wheel.NumberStructOutput[]], "view">;

  isOpenForWithdrawl: TypedContractMethod<[], [boolean], "view">;

  minbetinside: TypedContractMethod<[], [bigint], "view">;

  minbetoutside: TypedContractMethod<[], [bigint], "view">;

  mindeposit: TypedContractMethod<[], [bigint], "view">;

  openAccount: TypedContractMethod<[nick: string], [void], "payable">;

  openBets: TypedContractMethod<[], [bigint], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  place18Bet: TypedContractMethod<
    [which18: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeColorBet: TypedContractMethod<
    [color: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeColumnBet: TypedContractMethod<
    [column: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeCornerBet: TypedContractMethod<
    [
      number1: BigNumberish,
      number2: BigNumberish,
      number3: BigNumberish,
      number4: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  placeDoubleStreetBet: TypedContractMethod<
    [street: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeDozenBet: TypedContractMethod<
    [whichDozen: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeParityBet: TypedContractMethod<
    [parity: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeSplitBet: TypedContractMethod<
    [number1: BigNumberish, number2: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeStraightUpBet: TypedContractMethod<
    [numberId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeStreetBet: TypedContractMethod<
    [street: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeTopLineBet: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  spinTheWheel: TypedContractMethod<[], [void], "nonpayable">;

  timeBetweenBets: TypedContractMethod<[], [bigint], "view">;

  timeForBet: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  widthdrawFund: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateExposure"
  ): TypedContractMethod<[spinId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "closeAccount"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "currentBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "fundAccount"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getAccount"
  ): TypedContractMethod<[], [Wheel.AccountStructOutput], "view">;
  getFunction(
    nameOrSignature: "getAccounts"
  ): TypedContractMethod<[], [Wheel.AccountStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBetsForSpin"
  ): TypedContractMethod<
    [spinId: BigNumberish],
    [Wheel.BetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentBets"
  ): TypedContractMethod<[], [Wheel.BetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentSpin"
  ): TypedContractMethod<[], [Wheel.SpinStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLastSpins"
  ): TypedContractMethod<
    [count: BigNumberish],
    [Wheel.SpinStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNumbers"
  ): TypedContractMethod<[], [Wheel.NumberStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "isOpenForWithdrawl"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "minbetinside"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minbetoutside"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mindeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openAccount"
  ): TypedContractMethod<[nick: string], [void], "payable">;
  getFunction(
    nameOrSignature: "openBets"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "place18Bet"
  ): TypedContractMethod<
    [which18: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeColorBet"
  ): TypedContractMethod<
    [color: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeColumnBet"
  ): TypedContractMethod<
    [column: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeCornerBet"
  ): TypedContractMethod<
    [
      number1: BigNumberish,
      number2: BigNumberish,
      number3: BigNumberish,
      number4: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeDoubleStreetBet"
  ): TypedContractMethod<
    [street: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeDozenBet"
  ): TypedContractMethod<
    [whichDozen: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeParityBet"
  ): TypedContractMethod<
    [parity: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeSplitBet"
  ): TypedContractMethod<
    [number1: BigNumberish, number2: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeStraightUpBet"
  ): TypedContractMethod<
    [numberId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeStreetBet"
  ): TypedContractMethod<
    [street: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeTopLineBet"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spinTheWheel"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeBetweenBets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timeForBet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "widthdrawFund"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  getEvent(
    key: "AccountAdded"
  ): TypedContractEvent<
    AccountAddedEvent.InputTuple,
    AccountAddedEvent.OutputTuple,
    AccountAddedEvent.OutputObject
  >;
  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "NewSpinOpened"
  ): TypedContractEvent<
    NewSpinOpenedEvent.InputTuple,
    NewSpinOpenedEvent.OutputTuple,
    NewSpinOpenedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SpinStarted"
  ): TypedContractEvent<
    SpinStartedEvent.InputTuple,
    SpinStartedEvent.OutputTuple,
    SpinStartedEvent.OutputObject
  >;
  getEvent(
    key: "Spun"
  ): TypedContractEvent<
    SpunEvent.InputTuple,
    SpunEvent.OutputTuple,
    SpunEvent.OutputObject
  >;

  filters: {
    "AccountAdded()": TypedContractEvent<
      AccountAddedEvent.InputTuple,
      AccountAddedEvent.OutputTuple,
      AccountAddedEvent.OutputObject
    >;
    AccountAdded: TypedContractEvent<
      AccountAddedEvent.InputTuple,
      AccountAddedEvent.OutputTuple,
      AccountAddedEvent.OutputObject
    >;

    "BetPlaced()": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "NewSpinOpened()": TypedContractEvent<
      NewSpinOpenedEvent.InputTuple,
      NewSpinOpenedEvent.OutputTuple,
      NewSpinOpenedEvent.OutputObject
    >;
    NewSpinOpened: TypedContractEvent<
      NewSpinOpenedEvent.InputTuple,
      NewSpinOpenedEvent.OutputTuple,
      NewSpinOpenedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SpinStarted()": TypedContractEvent<
      SpinStartedEvent.InputTuple,
      SpinStartedEvent.OutputTuple,
      SpinStartedEvent.OutputObject
    >;
    SpinStarted: TypedContractEvent<
      SpinStartedEvent.InputTuple,
      SpinStartedEvent.OutputTuple,
      SpinStartedEvent.OutputObject
    >;

    "Spun()": TypedContractEvent<
      SpunEvent.InputTuple,
      SpunEvent.OutputTuple,
      SpunEvent.OutputObject
    >;
    Spun: TypedContractEvent<
      SpunEvent.InputTuple,
      SpunEvent.OutputTuple,
      SpunEvent.OutputObject
    >;
  };
}
